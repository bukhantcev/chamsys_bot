import os
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, MessageReactionUpdated, ReactionTypeEmoji
from aiogram.utils.markdown import hbold
import ai
# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv('TOKEN')
GROUP_ID = -4720635713  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
EMOJI_FUNC2 = "üòò"
EMOJI_FUNC3 = 'üî•'

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher()


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
def init_db():
    DB_PATH = "database.db"
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS dialog (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            vopros TEXT,
            otvet TEXT
        )
        """
    )
    conn.commit()
    conn.close()


init_db()


# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
class DialogFSM(StatesGroup):
    waiting_for_answer = State()
    threads = State()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    print(message)
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å ?!? –≤ –≥—Ä—É–ø–ø–µ ===
@dp.message(F.chat.id == GROUP_ID, F.text.startswith("?!?"))
async def func1(message: Message, state: FSMContext):
    prompt = message.text[len('?!?'):]
    if prompt != '':
        messages = [{"role": "user", "content": prompt}]
        thread_id = ai.create_threads(messages)
        ai.create_run(thread_id, ai.assistant)
        answer = ai.message_list(thread_id)
        await message.reply(answer)
        await state.update_data(thread_id=thread_id)
        await state.set_state(DialogFSM.threads)
        await asyncio.sleep(60)
        ai.delete_threads(thread_id)
        print('final')
        await state.clear()

    else:
        await message.reply("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å")
@dp.message(DialogFSM.threads)
async def dialog(message: Message, state: FSMContext):
    data = await state.get_data()
    thread_id = data.get('thread_id')
    ai.create_message(thread_id, message.text)
    ai.create_run(thread_id, ai.assistant)
    answer = ai.message_list(thread_id)
    await message.reply(answer)



# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π ===
@dp.message_reaction()
async def check_reaction(event: MessageReactionUpdated, state: FSMContext):


    chat_id = event.chat.id
    message_id = event.message_id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ message_id
    message = await bot.forward_message(
        chat_id=chat_id,
        from_chat_id=chat_id,
        message_id=message_id
    )


    reaction = event.new_reaction
    if isinstance(reaction[0], ReactionTypeEmoji):
        if reaction[0].emoji == EMOJI_FUNC2:
            await func2(message, state)
        elif reaction[0].emoji == EMOJI_FUNC3:
            await func3(message, state)



# === func2: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç ===
async def func2(message: Message, state: FSMContext):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO dialog (vopros) VALUES (?)", (message.text[len('?!?'):],))
    dialog_id = cursor.lastrowid
    conn.commit()
    conn.close()
    await state.update_data(dialog_id=dialog_id)
    await state.set_state(DialogFSM.waiting_for_answer)
    await message.answer("–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç (—Ä–µ–∞–∫—Ü–∏—è ‚úÖ).")


# === func3: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç ===
async def func3(message: Message, state: FSMContext):
    user_data = await state.get_data()
    dialog_id = user_data.get("dialog_id")

    if dialog_id:
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE dialog SET otvet = ? WHERE id = ?", (message.text[len('?!?'):], dialog_id))
        conn.commit()
        conn.close()

        await state.clear()
        await message.answer("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å (—Ä–µ–∞–∫—Ü–∏—è ‚ù§Ô∏è).")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
